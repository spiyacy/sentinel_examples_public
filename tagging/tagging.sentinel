# This policy uses the Sentinel tfplan/v2 import to require that specified Azure resources have all mandatory tags

# Import common-functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan

# Import azure-functions/azure-functions.sentinel
# with alias "azure"
import "azure-functions" as azure
import "strings"

# List of Azure resources that are required to have name/value tags.
resource_types = [
  #"azurerm_resource_group",
  #"azurerm_virtual_machine",
  "azurerm_linux_virtual_machine",
  #"azurerm_windows_virtual_machine",
  #"azurerm_virtual_network",
  "azurerm_key_vault",
  "azurerm_network_security_group",
]

# List of mandatory tags
mandatory_tags = [
  "owner",
  "environment",
]




# Get all Azure Resources with standard tags
allAzureResourcesWithStandardTags =
                        azure.find_resources_with_standard_tags(resource_types)

# Filter to Azure resources with violations using azurerm_virtual_machine
# Warnings will be printed for all violations since the last parameter is true
violatingAzureResources =
      plan.filter_attribute_not_contains_list(allAzureResourcesWithStandardTags,
                    "tags", mandatory_tags, true)
print("Violating Resources (If any) : ", violatingAzureResources)

# Set Default check to true
validated = true


for allAzureResourcesWithStandardTags as addr, rc {
		tags = plan.evaluate_attribute(rc, "tag") else null

		if tags is null {
			tags = plan.evaluate_attribute(rc, "tags") else null
			# If both tag (list of objects) and tags (one singular object) is null
			if tags is null {
				break
			} else {
				# Accounts for if tags is one singular object with key value pairs
				tag_names = []
				for tags as key, value {
					append(tag_names, key)
        }
      }
					

for tags as key, value {
					## Check environment for blank value as well as regex requirements
					if key is "environment" {
						if strings.to_lower(value) not matches "[a-z]{4}" {
							print("Resource", addr, "has tag 'environment' with value:", value, ". It must contain five alphabetic characters.", "\n")
							validated = false
						}
					}
					if key is "environment" {
						if strings.to_lower(value) is "" {
							print("Resource", addr, "has tag 'environment' with an empty value. It must not be empty.", "\n")
							validated = false
						}
					}
					## Check owner for blank value as well as regex requirements
					if key is "owner" {
						if strings.to_lower(value) not matches "[a-z0-9]+@hashicorp.com" {
							print("Resource", addr, "has tag 'owner' with value:", value, ". - email domain not valid.", "\n")
							validated = false
						}
					}
					if key is "owner" {
						if strings.to_lower(value) is "" {
							print("Resource", addr, "has tag 'owner' with an empty value. It must not be empty.", "\n")
							validated = false
						}
					}
					
        }
      }
}

# Main rule - Required Tags have valid values
main = rule {
  (length(violatingAzureResources["messages"]) is 0) and validated is true
}
